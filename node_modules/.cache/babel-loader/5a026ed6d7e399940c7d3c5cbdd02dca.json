{"ast":null,"code":"const VERSION = \"1.0.3\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\n\nfunction requestLog(octokit) {\n  octokit.hook.wrap(\"request\", (request, options) => {\n    octokit.log.debug(\"request\", options);\n    const start = Date.now();\n    const requestOptions = octokit.request.endpoint.parse(options);\n    const path = requestOptions.url.replace(options.baseUrl, \"\");\n    return request(options).then(response => {\n      octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n      return response;\n    }).catch(error => {\n      octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n      throw error;\n    });\n  });\n}\n\nrequestLog.VERSION = VERSION;\nexport { requestLog };","map":{"version":3,"sources":["../dist-src/version.js","../dist-src/index.js"],"names":[],"mappings":"AAAO,MAAM,OAAO,GAAG,OAAhB;ACCP;AACA;AACA;AACA;;AACO,SAAS,UAAT,CAAoB,OAApB,EAA6B;AAChC,EAAA,OAAO,CAAC,IAAR,CAAa,IAAb,CAAkB,SAAlB,EAA6B,CAAC,OAAD,EAAU,OAAV,KAAsB;AAC/C,IAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,CAAkB,SAAlB,EAA6B,OAA7B;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,GAAL,EAAd;AACA,UAAM,cAAc,GAAG,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAyB,KAAzB,CAA+B,OAA/B,CAAvB;AACA,UAAM,IAAI,GAAG,cAAc,CAAC,GAAf,CAAmB,OAAnB,CAA2B,OAAO,CAAC,OAAnC,EAA4C,EAA5C,CAAb;AACA,WAAO,OAAO,CAAC,OAAD,CAAP,CACF,IADE,CACI,QAAD,IAAc;AACpB,MAAA,OAAO,CAAC,GAAR,CAAY,IAAZ,CAAkB,GAAE,cAAc,CAAC,MAAO,IAAG,IAAK,MAAK,QAAQ,CAAC,MAAO,OAAM,IAAI,CAAC,GAAL,KAAa,KAAM,IAAhG;AACA,aAAO,QAAP;AACH,KAJM,EAKF,KALE,CAKK,KAAD,IAAW;AAClB,MAAA,OAAO,CAAC,GAAR,CAAY,IAAZ,CAAkB,GAAE,cAAc,CAAC,MAAO,IAAG,IAAK,MAAK,KAAK,CAAC,MAAO,OAAM,IAAI,CAAC,GAAL,KAAa,KAAM,IAA7F;AACA,YAAM,KAAN;AACH,KARM,CAAP;AASH,GAdD;AAeH;;AACD,UAAU,CAAC,OAAX,GAAqB,OAArB","sourcesContent":["export const VERSION = \"1.0.3\";\n","import { VERSION } from \"./version\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport function requestLog(octokit) {\n    octokit.hook.wrap(\"request\", (request, options) => {\n        octokit.log.debug(\"request\", options);\n        const start = Date.now();\n        const requestOptions = octokit.request.endpoint.parse(options);\n        const path = requestOptions.url.replace(options.baseUrl, \"\");\n        return request(options)\n            .then((response) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n            return response;\n        })\n            .catch((error) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n            throw error;\n        });\n    });\n}\nrequestLog.VERSION = VERSION;\n"]},"metadata":{},"sourceType":"module"}