{"ast":null,"code":"const VERSION = \"2.11.0\";\n/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\n\nfunction normalizePaginatedListResponse(response) {\n  const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n  if (!responseNeedsNormalization) return response; // keep the additional properties intact as there is currently no other way\n  // to retrieve the same information.\n\n  const incompleteResults = response.data.incomplete_results;\n  const repositorySelection = response.data.repository_selection;\n  const totalCount = response.data.total_count;\n  delete response.data.incomplete_results;\n  delete response.data.repository_selection;\n  delete response.data.total_count;\n  const namespaceKey = Object.keys(response.data)[0];\n  const data = response.data[namespaceKey];\n  response.data = data;\n\n  if (typeof incompleteResults !== \"undefined\") {\n    response.data.incomplete_results = incompleteResults;\n  }\n\n  if (typeof repositorySelection !== \"undefined\") {\n    response.data.repository_selection = repositorySelection;\n  }\n\n  response.data.total_count = totalCount;\n  return response;\n}\n\nfunction iterator(octokit, route, parameters) {\n  const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n  const requestMethod = typeof route === \"function\" ? route : octokit.request;\n  const method = options.method;\n  const headers = options.headers;\n  let url = options.url;\n  return {\n    [Symbol.asyncIterator]: () => ({\n      async next() {\n        if (!url) return {\n          done: true\n        };\n        const response = await requestMethod({\n          method,\n          url,\n          headers\n        });\n        const normalizedResponse = normalizePaginatedListResponse(response); // `response.headers.link` format:\n        // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n        // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n\n        url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n        return {\n          value: normalizedResponse\n        };\n      }\n\n    })\n  };\n}\n\nfunction paginate(octokit, route, parameters, mapFn) {\n  if (typeof parameters === \"function\") {\n    mapFn = parameters;\n    parameters = undefined;\n  }\n\n  return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\n\nfunction gather(octokit, results, iterator, mapFn) {\n  return iterator.next().then(result => {\n    if (result.done) {\n      return results;\n    }\n\n    let earlyExit = false;\n\n    function done() {\n      earlyExit = true;\n    }\n\n    results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n\n    if (earlyExit) {\n      return results;\n    }\n\n    return gather(octokit, results, iterator, mapFn);\n  });\n}\n\nconst composePaginateRest = Object.assign(paginate, {\n  iterator\n});\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\n\nfunction paginateRest(octokit) {\n  return {\n    paginate: Object.assign(paginate.bind(null, octokit), {\n      iterator: iterator.bind(null, octokit)\n    })\n  };\n}\n\npaginateRest.VERSION = VERSION;\nexport { composePaginateRest, paginateRest };","map":{"version":3,"sources":["../dist-src/version.js","../dist-src/normalize-paginated-list-response.js","../dist-src/iterator.js","../dist-src/paginate.js","../dist-src/compose-paginate.js","../dist-src/index.js"],"names":[],"mappings":"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","sourcesContent":["export const VERSION = \"2.11.0\";\n","/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\nexport function normalizePaginatedListResponse(response) {\n    const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n    if (!responseNeedsNormalization)\n        return response;\n    // keep the additional properties intact as there is currently no other way\n    // to retrieve the same information.\n    const incompleteResults = response.data.incomplete_results;\n    const repositorySelection = response.data.repository_selection;\n    const totalCount = response.data.total_count;\n    delete response.data.incomplete_results;\n    delete response.data.repository_selection;\n    delete response.data.total_count;\n    const namespaceKey = Object.keys(response.data)[0];\n    const data = response.data[namespaceKey];\n    response.data = data;\n    if (typeof incompleteResults !== \"undefined\") {\n        response.data.incomplete_results = incompleteResults;\n    }\n    if (typeof repositorySelection !== \"undefined\") {\n        response.data.repository_selection = repositorySelection;\n    }\n    response.data.total_count = totalCount;\n    return response;\n}\n","import { normalizePaginatedListResponse } from \"./normalize-paginated-list-response\";\nexport function iterator(octokit, route, parameters) {\n    const options = typeof route === \"function\"\n        ? route.endpoint(parameters)\n        : octokit.request.endpoint(route, parameters);\n    const requestMethod = typeof route === \"function\" ? route : octokit.request;\n    const method = options.method;\n    const headers = options.headers;\n    let url = options.url;\n    return {\n        [Symbol.asyncIterator]: () => ({\n            async next() {\n                if (!url)\n                    return { done: true };\n                const response = await requestMethod({ method, url, headers });\n                const normalizedResponse = normalizePaginatedListResponse(response);\n                // `response.headers.link` format:\n                // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n                // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n                url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n                return { value: normalizedResponse };\n            },\n        }),\n    };\n}\n","import { iterator } from \"./iterator\";\nexport function paginate(octokit, route, parameters, mapFn) {\n    if (typeof parameters === \"function\") {\n        mapFn = parameters;\n        parameters = undefined;\n    }\n    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\nfunction gather(octokit, results, iterator, mapFn) {\n    return iterator.next().then((result) => {\n        if (result.done) {\n            return results;\n        }\n        let earlyExit = false;\n        function done() {\n            earlyExit = true;\n        }\n        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n        if (earlyExit) {\n            return results;\n        }\n        return gather(octokit, results, iterator, mapFn);\n    });\n}\n","import { paginate } from \"./paginate\";\nimport { iterator } from \"./iterator\";\nexport const composePaginateRest = Object.assign(paginate, {\n    iterator,\n});\n","import { VERSION } from \"./version\";\nimport { paginate } from \"./paginate\";\nimport { iterator } from \"./iterator\";\nexport { composePaginateRest } from \"./compose-paginate\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport function paginateRest(octokit) {\n    return {\n        paginate: Object.assign(paginate.bind(null, octokit), {\n            iterator: iterator.bind(null, octokit),\n        }),\n    };\n}\npaginateRest.VERSION = VERSION;\n"]},"metadata":{},"sourceType":"module"}